// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package tutorial

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO "Product"(
    bar_code,
    name,
    category,
    rating

)
VALUES(
     $1, 
     $2,   
     $3,  
     $4    
)
RETURNING id, bar_code, name, category, rating, created_at
`

type CreateProductParams struct {
	BarCode  sql.NullInt32
	Name     sql.NullString
	Category sql.NullString
	Rating   sql.NullInt32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.BarCode,
		arg.Name,
		arg.Category,
		arg.Rating,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.BarCode,
		&i.Name,
		&i.Category,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec

DELETE FROM "Product" WHERE id=$1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one

SELECT id, bar_code, name, category, rating, created_at FROM "Product"
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.BarCode,
		&i.Name,
		&i.Category,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many

SELECT id, bar_code, name, category, rating, created_at FROM "Product"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.BarCode,
			&i.Name,
			&i.Category,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one

UPDATE "Product"
SET rating = $2
WHERE id =$1
RETURNING id, bar_code, name, category, rating, created_at
`

type UpdateProductParams struct {
	ID     int32
	Rating sql.NullInt32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.ID, arg.Rating)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.BarCode,
		&i.Name,
		&i.Category,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}
